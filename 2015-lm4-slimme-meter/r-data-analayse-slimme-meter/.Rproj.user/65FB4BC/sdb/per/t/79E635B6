{
    "contents" : "# slimme meter data vezel 14\n\n# postgreSQL\nrequire(\"RPostgreSQL\", lib.loc=\"~/R/x86_64-pc-linux-gnu-library/3.0\")\n\n# Establish connection to PoststgreSQL using RPostgreSQL\ndrv <- dbDriver(\"PostgreSQL\")\n\n# read P1 data from P1DB\n# Full version of connection setting\ncon <- dbConnect(drv, dbname=\"p1db\",host=\"localhost\",port=5432,user=\"hugo\",password=\"snampook\" )\n#conPi <- dbConnect(drv, dbname=\"p1db\",host=\"raspberrypi\",port=5432,user=\"hugo\",password=\"snampook\" )\n\n# read table as dataframe\ndf.p1 <- dbReadTable(con, c(\"p1data\"))\n\n#read the aggregated view per 24 hours\ndf.gas <- dbReadTable(con, c(\"vw_gpd\"))\nnames(df.gas)\n# remove first line as it contains absolute ytd gas usage\ndf.gas <- df.gas[-1,]\n# shift one hour\ndt <- as.POSIXlt(df.gas$dt)\ndt$hour <- as.POSIXlt(df.gas$dt)$hour -2\ndf.gas$dt <- dt\n\n# transform UTC naar datetime\ndf.p1$dt <- as.POSIXlt(df.p1$utc_timestamp, origin=\"1970-01-01\", tz=\"\") # current timezone\n\n# add day of week\ndf.gas$day <- weekdays(strptime(df.gas$dt, \"%Y-%m-%d\"))\ndf.p1$day <- weekdays(strptime(df.p1$dt, \"%Y-%m-%d\"))\n\n# add hour from timestamp\ndf.gas$hour <- strptime(df.gas$dt,\"%Y-%m-%d %H:%M:%S\")$hour\ndf.p1$hour <- strptime(df.p1$dt,\"%Y-%m-%d %H:%M:%S\")$hour\n\n# ggplot\nrequire(ggplot2)\n\n# # some plots on gas usage\n# ggplot(df.gas, aes(dt, dg)) + geom_line() + xlab(\"\") + ylab(\"Gas use per hour\")\n# \n# # aggregate per day of the week\n# boxplot(df.gas$dg ~ df.gas$day)\n# \n# # aggregate gas per hour\n# res1 <- aggregate(dg ~ hour , data=df.gas, FUN=sum)\n# plot(res1,main=\"Gas use per hour of day\")\n# \n# # aggregate electra per hour\n# # TODO check mean or sum ...\n# res3 <- aggregate(afgenomen_vermogen ~ hour , data=df.p1, FUN=mean)\n# plot(res3,main=\"Power use per hour of day\")\n# \n# # gas per day of the week per hour\n# res2 <- aggregate(dg ~ day + hour , data=df.gas, FUN=mean)\n# ggplot(res2, aes(hour, dg)) + geom_point() + xlab(\"\") +\n#   ylab(\"Average gas use per hour\") + facet_grid(day ~ .) + stat_smooth(method = \"auto\", span = 0.25)\n# \n# # electra per day of the week per hour\n# res4 <- aggregate(afgenomen_vermogen ~ day + hour , data=df.p1, FUN=sum)\n# ggplot(res4, aes(hour, afgenomen_vermogen)) + geom_point() + xlab(\"\") +\n#   ylab(\"Average power use per hour\") + facet_grid(day ~ .) + stat_smooth(method = \"auto\", span = 0.25)\n# \n# \n# g <- ggplot(df.gas, aes(hour, dg))\n# g + geom_point() + xlab(\"\") + ylab(\"Gas use per hour\") + facet_grid(day ~ .) + geom_smooth(method = \"auto\", size = 1.5)\n\n# Close PostgreSQL connection \ndbDisconnect(con)\n\n# read weather Data from wsdb\nconWS <- dbConnect(drv, dbname=\"wsdb\",host=\"localhost\",port=5432,user=\"hugo\",password=\"snampook\" )\n\n# read table as dataframe\ndf.ti <- dbReadTable(conWS, c(\"intempdata\"))\ndf.to <- dbReadTable(conWS, c(\"outtempdata\"))\n# Close PostgreSQL connection \ndbDisconnect(conWS)\n\n# convert timestamp to POSIX\ndf.ti$dt <- as.POSIXlt(df.ti$utc_timestamp, origin=\"1970-01-01\", tz=\"\") #timezone\n\n# aggregate per hour\nintemp <- setNames(aggregate(intemp ~ cut(dt, 'hours'), data=df.ti, mean),c(\"dt\",\"intemp\"))\ninhumidity <- setNames(aggregate(inhumidity ~ cut(dt, 'hours'), data=df.ti, mean),c(\"dt\",\"inhumidity\"))\n\n# set dt back to posix apparently aggregate cuts them to factors\nintemp$dt <- as.POSIXct(intemp$dt)\ninhumidity$dt <- as.POSIXct(inhumidity$dt)\n\n# merge\ndf.ti.h <- merge(intemp,inhumidity, by=1)\n\n# add day of week\ndf.ti.h$day <- weekdays(strptime(df.ti.h$dt, \"%Y-%m-%d\"))\n# add hour from timestamp\ndf.ti.h$hour <- strptime(df.ti.h$dt,\"%Y-%m-%d %H:%M:%S\")$hour\n\n# convert timestamp to POSIX\ndf.to$dt <- as.POSIXlt(df.to$utc_timestamp, origin=\"1970-01-01\", tz=\"CET\")\n\n# aggregate per hour\nouttemp <- setNames(aggregate(outtemp ~ cut(dt, 'hours'), data=df.to, mean),c(\"dt\",\"outtemp\"))\nouthumidity <- setNames(aggregate(outhumidity ~ cut(dt, 'hours'), data=df.to, mean),c(\"dt\",\"outhumidity\"))\n# set dt back to posix apparently aggregate cuts them to factors\nouttemp$dt <- as.POSIXct(outtemp$dt)\nouthumidity$dt <- as.POSIXct(outhumidity$dt)\n\n# merge\ndf.to.h <- merge(outtemp,outhumidity, by=1)\n# merge inside and outside datasets\ndf.t <- merge(df.ti.h,df.to.h, by=1)\n# calc delta temp\ndf.t$dtemp <- df.t$intemp-df.t$outtemp\n# # plot hist\n# hist(df.t$dtemp, breaks=100)\n# hist(df.tot$dg, breaks=100)\n# hist(df.t$intemp, breaks=100)\n\n# combine p1 gas  and weatherdata\ndf.tot <- merge(df.t,df.gas)\n\n# # plot \n# plot(df.tot$dtemp,df.tot$dg)\n# plot(df.tot$outtemp,df.tot$dg)\n# plot(df.tot$intemp,df.tot$dg)\n\n# correlation between temps humidity and gas\ndf.num <- df.tot[,c(\"intemp\",\"outtemp\",\"dg\",\"dtemp\",\"inhumidity\",\"outhumidity\")]\n# correlation\ncor(df.num)\n\n# filter on if we burn gas\ndf <- df.num[df.num$dg>0,]\n\ncor(df$dg,df$dtemp)\nplot(df$dg,df$dtemp)\n\n# # fit model\n# m1 <- glm(dg ~ dtemp + outtemp + outhumidity, data=df.tot)\n# m1b <- glm(dg ~ dtemp + outtemp + outhumidity, data=df)\n# m2 <- glm(dtemp ~ dg + outtemp + outhumidity, data=df.tot)\n\n# plot specific date\ndf.date <- df.tot[as.Date(df.tot$dt) %in% as.Date(c(\"2014-01-05\")),]\n\nbarplot(df.date$dg)\n\nggplot(df.date, aes(x=dt,y=dg)) + geom_bar(stat=\"identity\")\n\n# melt all temps\nlibrary(\"reshape2\")\nmdf <- melt(df.date[c(\"dt\",\"intemp\",\"outtemp\",\"dtemp\")], id.vars=\"dt\", value.name=\"value\", variable.name=\"temp\")\n\np1 <- ggplot(data=mdf, aes(x=dt, y=value, group = temp, colour = temp)) +\n  geom_line() +\n  geom_point( size=4, shape=21, fill=\"white\") +\n  ylab(\"Temperatuur (C)\") + xlab(\" \") + \n  guides(colour=FALSE)\n\np2 <- ggplot(df.date, aes(x=dt,y=dg)) + \n  ylab(\"Gasverbruik\") + xlab(\"Tijdstip\") + \n  geom_bar(stat=\"identity\")\n\nrequire(gridExtra)\ngrid.arrange(p1, p2)\n\n",
    "created" : 1436458605496.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2841568849",
    "id" : "79E635B6",
    "lastKnownWriteTime" : 1438609945,
    "path" : "~/r-studio/slimme_meter/getDataFromPostgreSQL.R",
    "project_path" : "getDataFromPostgreSQL.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}